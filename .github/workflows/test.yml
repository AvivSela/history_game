name: Test Suite

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main, develop ]

env:
  NODE_VERSION: '24'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        # Run frontend and backend tests in parallel
        workspace: [frontend, backend]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run frontend tests
        if: matrix.workspace == 'frontend'
        run: yarn test:frontend

      - name: Run backend tests
        if: matrix.workspace == 'backend'
        run: yarn test:backend

      - name: Upload coverage reports
        if: matrix.workspace == 'frontend'
        uses: codecov/codecov-action@v4
        with:
          file: ./timeline-frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage
          fail_ci_if_error: false

      - name: Upload coverage reports
        if: matrix.workspace == 'backend'
        uses: codecov/codecov-action@v4
        with:
          file: ./timeline-backend/coverage/lcov.info
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false

  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run ESLint
        run: yarn lint

      - name: Check Prettier formatting
        run: yarn workspace timeline-frontend format:check

  build:
    name: Build Check
    runs-on: ubuntu-latest
    needs: [test, lint]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Build frontend
        run: yarn build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: timeline-frontend/dist
          retention-days: 7

      - name: Test Summary
        run: |
          echo "## 🧪 Test Suite Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Frontend Tests**: Completed" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Backend Tests**: Completed" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Linting**: Completed" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Build**: Completed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📊 **Coverage**: Check individual test steps above for coverage reports" >> $GITHUB_STEP_SUMMARY
          echo "🔧 **Artifacts**: Build artifacts uploaded for potential deployment" >> $GITHUB_STEP_SUMMARY
        if: always()

  # Status reporting job to ensure PR status is properly reported
  status-report:
    name: Status Report
    runs-on: ubuntu-latest
    needs: [test, lint, build]
    if: always()
    
    steps:
      - name: Report Status
        run: |
          echo "## 📋 Test Suite Status Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.test.result }}" == "success" ] && [ "${{ needs.lint.result }}" == "success" ] && [ "${{ needs.build.result }}" == "success" ]; then
            echo "✅ **Overall Status**: All checks passed successfully" >> $GITHUB_STEP_SUMMARY
            echo "🚀 **Ready for merge**: All required checks completed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Overall Status**: Some checks failed" >> $GITHUB_STEP_SUMMARY
            echo "🔍 **Failed Jobs**: " >> $GITHUB_STEP_SUMMARY
            [ "${{ needs.test.result }}" != "success" ] && echo "- Tests: ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
            [ "${{ needs.lint.result }}" != "success" ] && echo "- Lint: ${{ needs.lint.result }}" >> $GITHUB_STEP_SUMMARY
            [ "${{ needs.build.result }}" != "success" ] && echo "- Build: ${{ needs.build.result }}" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📊 **Job Results**:">> $GITHUB_STEP_SUMMARY
          echo "- Tests: ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Lint: ${{ needs.lint.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Build: ${{ needs.build.result }}" >> $GITHUB_STEP_SUMMARY
        if: always() 