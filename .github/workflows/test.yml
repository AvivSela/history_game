name: Tests

on:
  push:
    branches: [master, main]
  pull_request:
    branches: [master, main]

jobs:
  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run frontend tests
        run: yarn test:frontend

  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: timeline_game_test
          POSTGRES_USER: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Wait for database
        run: |
          echo "Waiting for PostgreSQL to be ready..."
          while ! pg_isready -h localhost -p 5433 -U postgres; do
            sleep 1
          done
          echo "PostgreSQL is ready!"

      - name: Setup test database
        run: |
          cd timeline-backend
          echo "üß™ Testing database connection first..."
          node scripts/test-db-connection.js
          echo "üîç Checking database status..."
          node scripts/migrate.js status
          echo "üîÑ Running database migrations..."
          node scripts/migrate.js migrate
          echo "‚úÖ Verifying database setup..."
          node scripts/migrate.js status
          echo "üîç Validating migration integrity..."
          node scripts/migrate.js validate
          echo "üéâ Database setup complete!"
        env:
          NODE_ENV: test
          TEST_DB_HOST: localhost
          TEST_DB_PORT: 5433
          TEST_DB_NAME: timeline_game_test
          TEST_DB_USER: postgres
          TEST_DB_PASSWORD: password

      - name: Generate Prisma client
        run: |
          echo "üîß Current directory: $(pwd)"
          echo "üîß Node modules structure before generation:"
          ls -la node_modules/.prisma/ 2>/dev/null || echo "No .prisma directory found"
          echo "üîß Generating Prisma client from workspace root..."
          yarn workspace timeline-backend db:generate
          echo "‚úÖ Prisma client generated successfully!"
          echo "üîß Verifying Prisma client generation..."
          ls -la node_modules/.prisma/client/ 2>/dev/null || echo "‚ùå Prisma client not found in expected location"
          echo "üîß Checking if Prisma client can be imported..."
          cd timeline-backend
          node -e "
            try {
              const { PrismaClient } = require('@prisma/client');
              console.log('‚úÖ PrismaClient can be imported');
              const prisma = new PrismaClient();
              console.log('‚úÖ PrismaClient can be instantiated');
              console.log('‚úÖ Prisma setup verification completed');
            } catch(e) {
              console.log('‚ùå Prisma client test failed:', e.message);
              process.exit(1);
            }
          "
        env:
          NODE_ENV: test
          DATABASE_URL: "postgresql://postgres:password@localhost:5433/timeline_game_test?connection_limit=5&pool_timeout=20"
          USE_PRISMA_CARDS: "true"
          USE_PRISMA_SESSIONS: "true"
          USE_PRISMA_MOVES: "true"
          USE_PRISMA_STATISTICS: "basic"
          TEST_DB_HOST: localhost
          TEST_DB_PORT: 5433
          TEST_DB_NAME: timeline_game_test
          TEST_DB_USER: postgres
          TEST_DB_PASSWORD: password

      - name: Fallback Prisma client generation
        if: failure()
        run: |
          echo "üîÑ Attempting fallback Prisma client generation..."
          echo "üîß Current directory: $(pwd)"
          echo "üîß Node modules structure:"
          ls -la node_modules/ 2>/dev/null || echo "No node_modules found"
          echo "üîß Generating Prisma client directly from root..."
          npx prisma generate --schema=timeline-backend/prisma/schema.prisma
          echo "‚úÖ Fallback Prisma client generation completed!"
          echo "üîß Verifying fallback generation..."
          ls -la node_modules/.prisma/client/ 2>/dev/null || echo "‚ùå Prisma client still not found"
        env:
          NODE_ENV: test
          DATABASE_URL: "postgresql://postgres:password@localhost:5433/timeline_game_test?connection_limit=5&pool_timeout=20"
          USE_PRISMA_CARDS: "true"
          USE_PRISMA_SESSIONS: "true"
          USE_PRISMA_MOVES: "true"
          USE_PRISMA_STATISTICS: "basic"
          TEST_DB_HOST: localhost
          TEST_DB_PORT: 5433
          TEST_DB_NAME: timeline_game_test
          TEST_DB_USER: postgres
          TEST_DB_PASSWORD: password

      - name: Verify Prisma setup
        run: |
          echo "üîç Verifying Prisma setup before tests..."
          echo "üîç Checking Prisma client location..."
          ls -la node_modules/.prisma/client/ 2>/dev/null || echo "‚ùå Prisma client not found"
          echo "üîç Testing Prisma client import..."
          cd timeline-backend
          node -e "
            try {
              const { PrismaClient } = require('@prisma/client');
              console.log('‚úÖ PrismaClient can be imported');
              const prisma = new PrismaClient();
              console.log('‚úÖ PrismaClient can be instantiated');
              console.log('‚úÖ Prisma setup verification completed');
            } catch(e) {
              console.log('‚ùå Prisma client test failed:', e.message);
              process.exit(1);
            }
          "
        env:
          NODE_ENV: test
          DATABASE_URL: "postgresql://postgres:password@localhost:5433/timeline_game_test?connection_limit=5&pool_timeout=20"
          USE_PRISMA_CARDS: "true"
          USE_PRISMA_SESSIONS: "true"
          USE_PRISMA_MOVES: "true"
          USE_PRISMA_STATISTICS: "basic"
          TEST_DB_HOST: localhost
          TEST_DB_PORT: 5433
          TEST_DB_NAME: timeline_game_test
          TEST_DB_USER: postgres
          TEST_DB_PASSWORD: password

      - name: Run backend tests
        run: yarn test:backend
        env:
          NODE_ENV: test
          DATABASE_URL: "postgresql://postgres:password@localhost:5433/timeline_game_test?connection_limit=5&pool_timeout=20"
          USE_PRISMA_CARDS: "true"
          USE_PRISMA_SESSIONS: "true"
          USE_PRISMA_MOVES: "true"
          USE_PRISMA_STATISTICS: "basic"
          TEST_DB_HOST: localhost
          TEST_DB_PORT: 5433
          TEST_DB_NAME: timeline_game_test
          TEST_DB_USER: postgres
          TEST_DB_PASSWORD: password

      - name: Database cleanup
        if: always()
        run: |
          cd timeline-backend
          echo "üßπ Cleaning up test database..."
          node scripts/migrate.js reset
        env:
          NODE_ENV: test
          TEST_DB_HOST: localhost
          TEST_DB_PORT: 5433
          TEST_DB_NAME: timeline_game_test
          TEST_DB_USER: postgres
          TEST_DB_PASSWORD: password 